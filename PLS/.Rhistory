resmir5a6vsn.mss <- normalise(resmir5a6.mss, 'vsn')
tiff("Bo_Mouse/test_flipped_NormalizationBox.tiff", width = 4, height = 4, units = 'in', res=600)
.plot(resmir5a6vsn.mss)
dev.off()
# PCA
pd <- phenoData(resmir5a6vsn.mss)$TreatmentGroup
names(pd) <- sampleNames(resmir5a6vsn.mss)
#change file name
e <- exprs(resmir5a6vsn.mss)
p <- plotPCA_sc_v2(e, pd, '1', title=paste('', ''))
print(e)
print(pd)
tiff("Bo_Mouse/test_flipped_PCA.tiff", width = 4, height = 4, units = 'in', res = 600)
plot(p)
dev.off()
# DIFFERENTIAL EXPRESSION
group <- factor(phenoData(resmir5a6vsn.mss)$TreatmentGroup)
# DIFFERENTIAL EXPRESSION
group <- factor(phenoData(resmir5a6vsn.mss)$TreatmentGroup)
design <- model.matrix(~0+group)
View(design)
colnames(design) <- c('Ctrl', 'Transgn')
fit <- lmFit(e, design)
View(fit)
cm <- makeContrasts(Ctrl-Transgn, levels=design)
View(cm)
fit2 <- contrasts.fit(fit, cm)
fit2 <- eBayes(fit2)
#change file name
tt.df <- topTable(fit2, number=Inf, sort.by ='p', p.value=1)[, c(1, 4, 5)]
View(tt.df)
View(fit2)
View(fit)
View(e)
View(design)
View(cm)
View(annotmir5a6.df)
View(e)
View(cm)
View(e)
View(fit2)
View(fit)
View(uniprot2genename.df)
View(tt.df)
runApp('FASinformatics')
runApp('FASinformatics')
runApp('FASinformatics')
runApp('FASinformatics')
runApp('FASinformatics')
runApp('FASinformatics')
runApp('FASinformatics')
runApp('FASinformatics')
runApp('FASinformatics')
runApp('FASinformatics')
runApp('FASinformatics')
pls.df <- read.table("MonoVsNoneC1allplate_ONLYupanddownregulated.csv", header=TRUE, quote='\"', sep=',', comment.char='')
monoNone.df <- data.frame(pls.df['Mono'], pls.df['None'])
monoTrain <- monoNone.df[1:400,]
monoTest <- monoNone.df[401:1211,]
mono1 <- plsr(Mono ~ None, ncomp=1, data = monoTrain, validation = "LOO")
summary(mono1)
plot(RMSEP(mono1))
plot(mono1, ncomp=1, asp=1)
explvar(mono1)
crossval(mono1, segments=10)
plot(MSEP(mn))
summary(mn)
mn <- crossval(mono1, segments=10)
pls.df <- read.table("MonoVsNoneC1allplate_ONLYupanddownregulated.csv", header=TRUE, quote='\"', sep=',', comment.char='')
monoNone.df <- data.frame(pls.df['Mono'], pls.df['None'])
pls.df <- read.table("MonoVsNoneC1allplate_ONLYupanddownregulated.csv", header=TRUE, quote='\"', sep=',', comment.char='')
setwd("~/Desktop/ProductionAndInformatics/FASinformatics/PLS")
pls.df <- read.table("MonoVsNoneC1allplate_ONLYupanddownregulated.csv", header=TRUE, quote='\"', sep=',', comment.char='')
monoNone.df <- data.frame(pls.df['Mono'], pls.df['None'])
monoTrain <- monoNone.df[1:400,]
monoTest <- monoNone.df[401:1211,]
mono1 <- plsr(Mono ~ None, ncomp=1, data = monoTrain, validation = "LOO")
summary(mono1)
plot(RMSEP(mono1))
plot(mono1, ncomp=1, asp=1)
explvar(mono1)
mn <- crossval(mono1, segments=10)
plot(MSEP(mn))
summary(mn)
plot(mono1, ncomp=1, asp=1)
plot(mono1, plottype = "coef", ncomp=1:3)
plot(mono1, plottype = "coef", ncomp=1)
plot(mn)
summary(mn)
mono1 <- plsr(Mono ~ None, ncomp=6, data = monoTrain, validation = "LOO")
runApp('~/Desktop/ProductionAndInformatics/FASinformatics')
source('~/Desktop/ProductionAndInformatics/FASinformatics/PLS/proteomics_pls.R', echo=TRUE)
ggplot(mono1, aes(Mono, None, fill= Z)) +
geom_tile()
ggplot(monoNone.df, aes(Mono, None, fill= Z)) +
geom_tile()
ggplot(monoNone.df, aes(Mono, None)) +
geom_tile()
View(mono1)
ggplot(monoNone.df, aes(Mono, None, fill= mono1)) +
geom_tile()
monoNone.df$Z <- runif(400, 0, 5)
monoNone.df$Z <- runif(1211, 0, 5)
ggplot(monoNone.df, aes(Mono, None, fill= mono1)) +
geom_tile()
ggplot(monoNone.df, aes(Mono, None, fill= Z)) +
geom_tile()
View(monoNone.df)
ggplot(monoNone.df, aes(monoNone.df$Mono, monoNone.df$None, fill= Z)) +
geom_tile()
ggplot(monoNone.df, aes(Mono, None, fill= Z)) +
geom_tile()
X <- log(monoNone.df['Mono'])
Y <- log(monoNone.df['None'])
monoNone.df$Z <- runif(1211, 0, 5)
ggplot(monoNone.df, aes(Mono, None, fill= Z)) +
geom_tile()
View(X)
X <- log(monoNone.df['Mono'],2)[1:400]
ggplot(monoNone.df, aes(X, Y, fill= Z)) +
geom_tile()
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
X <- log(monoNone.df['Mono'],2)
Y <- log(monoNone.df['None'],2)
data <- expand.grid(X=x, Y=y)
monoNone.df$Z <- runif(1211, 0, 5)
x <- log(monoNone.df['Mono'],2)
y <- log(monoNone.df['None'],2)
data <- expand.grid(X=x, Y=y)
monoNone.df$Z <- runif(1211, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- runif(1211, 0, 5)
data$Z <- runif(400, 0, 5)
x <- log(monoNone.df['Mono'],2)
y <- log(monoNone.df['None'],2)
data <- expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
View(data)
View(data)
View(X)
View(y)
View(Y)
x <- monoNone.df['Mono'],2
x <- monoNone.df['Mono']
y <- monoNone.df['None']
data <- expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
View(data)
library(ggplot2)
library(tidyr)
library(tibble)
library(hrbrthemes)
library(dplyr)
install.packages("tidyr")
install.packages("hrbrthemes")
# Heatmap
volcano %>%
# Data wrangling
as_tibble() %>%
rowid_to_column(var="X") %>%
gather(key="Y", value="Z", -1) %>%
# Change Y to numeric
mutate(Y=as.numeric(gsub("V","",Y))) %>%
# Viz
ggplot(aes(X, Y, fill= Z)) +
geom_tile() +
theme_ipsum() +
theme(legend.position="none")
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
Z <- runif(400, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
ggplot(aes(X, Y, fill= Z)) +
geom_tile()
ggplot(aes(X, Y, fill= Z)) +
geom_tile()+
theme_ipsum() +
theme(legend.position="none")
# Heatmap
volcano %>%
# Data wrangling
as_tibble() %>%
rowid_to_column(var="X") %>%
gather(key="Y", value="Z", -1) %>%
# Change Y to numeric
mutate(Y=as.numeric(gsub("V","",Y))) %>%
ggplot(aes(X, Y, fill= Z)) +
geom_tile()+
theme_ipsum() +
theme(legend.position="none")
# Heatmap
volcano %>%
# Data wrangling
as_tibble() %>%
rowid_to_column(var="X") %>%
gather(key="Y", value="Z", -1) %>%
# Change Y to numeric
mutate(Y=as.numeric(gsub("V","",Y))) %>%
ggplot(aes(X, Y, fill= Z)) +
geom_tile()+
theme_ipsum() +
theme(legend.position="none")
x <- monoNone.df['Mono']
y <- monoNone.df['None']
data <- expand.grid(X=x, Y=y)
Z <- runif(400, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()+
theme_ipsum() +
theme(legend.position="none")
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()+
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x <- monoNone.df['Mono']
y <- monoNone.df['None']
data <- expand.grid(X=x, Y=y)
Z <- runif(400, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
library(ggplot2)
x <- monoNone.df['Mono']
y <- monoNone.df['None']
data <- expand.grid(X=x, Y=y)
Z <- runif(400, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- runif(400, 0, 5)
View(data)
x <- monoNone.df['Mono']
y <- monoNone.df['None']
#data <- expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
x <- monoNone.df['Mono']
y <- monoNone.df['None']
#data <- expand.grid(X=x, Y=y)
Z <- runif(1211, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
ggplot(aes(X, Y, fill= Z)) +
geom_tile()
x <- log(monoNone.df['Mono'])
y <- log(monoNone.df['None'])
data <- expand.grid(X=x, Y=y)
Z <- runif(1211, 0, 5)
ggplot(aes(X, Y, fill= Z)) +
geom_tile()
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x <- log(monoNone.df['Mono'],2)
y <- log(monoNone.df['None'],2)
data <- data.frame(X=x, Y=y)
View(data)
data$Z <- runif(1211, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data <- expand.grid.df(X=x, Y=y)
View(data)
data$Z <- runif(1211, 0, 5)
data <- expand.grid(X=x, Y=y)
data <- expand.grid.df(X=x, Y=y)
data <- expand.grid(X=x[1:90], Y=y[1:90])
data <- data.frame(X=x[1:90], Y=y[1:90])
x <- log(monoNone.df['Mono'],2)
y <- log(monoNone.df['None'],2)
data <- data.frame(X=x[1:90], Y=y[1:90])
y <- log(monoNone.df['None'][1:90],2)
x <- log(monoNone.df['Mono'][1:90],2)
data <- data.frame(X=x, Y=y)
data$Z <- runif(1211, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(data, aes(x=X, y=Y, fill= Z)) +
geom_tile()
library(ggplot2)
x <- log(monoNone.df['Mono'],2)
y <- log(monoNone.df['None'],2)
data <- data.frame(X=x, Y=y)
data$Z <- runif(1211, 0, 5)
ggplot(data, aes(x=X, y=Y, fill= Z)) +
geom_tile()
ggplot(data=dta[1:90;], aes(x=X, y=Y, fill= Z)) +
geom_tile()
ggplot(data=dta[1:90,], aes(x=X, y=Y, fill= Z)) +
geom_tile()
x <- log(monoNone.df['Mono'],2)
y <- log(monoNone.df['None'],2)
dta <- data.frame(X=x, Y=y)
dta$Z <- runif(1211, 0, 5)
ggplot(data=dta[1:90,], aes(x=X, y=Y, fill= Z)) +
geom_tile()
ggplot(data=dta[1:90,], aes(x=X, y=Y)) +
geom_tile()
library(ggplot2)
x <- log(monoNone.df['Mono'],2)
y <- log(monoNone.df['None'],2)
pls.df <- read.table("MonoVsNoneC1allplate_ONLYupanddownregulated.csv", header=TRUE, quote='\"', sep=',', comment.char='')
monoNone.df <- data.frame(pls.df['Mono'], pls.df['None'])
x <- log(monoNone.df['Mono'],2)
y <- log(monoNone.df['None'],2)
dta <- data.frame(X=x, Y=y)
dta$Z <- runif(1211, 0, 5)
ggplot(data=dta[1:90,], aes(x=X, y=Y)) +
geom_tile()
pls.df <- read.table("MonoVsNoneC1allplate_ONLYupanddownregulated.csv", header=TRUE, quote='\"', sep=',', comment.char='')
monoNone.df <- data.frame(pls.df['Mono'], pls.df['None'])
library(ggplot2)
datax <- log(monoNone.df['Mono'],2)
datay <- log(monoNone.df['None'],2)
dta <- data.frame(X=x, Y=y)
dta <- data.frame(X=datax, Y=datay)
dta$Z <- runif(1211, 0, 5)
ggplot(data=dta[1:90,], aes(x=datax, y=datay)) +
geom_tile()
ggplot(data=dta, aes(x=datax, y=datay)) +
geom_tile()
ggplot(data=dta, aes(x=datax, y=datay)) +
geom_point()
ggplot(data=dta, aes(x=datax, y=datay)) +
geom_point()
View(dta)
ggplot(data=dta, aes(x=dta$datax, y=dta$datay)) +
geom_point()
ggplot(data=dta, aes(x=dta$datax, y=dta$datay)) +
geom_tile()
ggplot(data=dta, aes(x=dta$datax, y=dta$datay)) +
scale_x_continuous()+
geom_tile()
ggplot(dta, aes(x=dta$datax, y=dta$datay)) +
scale_x_continuous()+
geom_tile()
ggplot(dta, aes(x = dta$datax, y = dta$datay)) +
scale_x_continuous()+
geom_tile()
library(tribble)
ggplot(dta, aes(datax, datay)) +
scale_x_continuous()+
geom_tile()
ggplot(dta, aes(datax, datay)) +
geom_point() +
geom_point(data = dta, aes(y = datay), colour = 'red', size = 3)
View(datax)
datax <- monoNone.df[0]
View(datax)
datax <- monoNone.df[1]
View(datax)
View(datax)
datax <- monoNone.df[1][0]
View(datax)
datax <- monoNone.df[1][1]
View(datax)
datay <- monoNone.df[2]
View(datay)
ggplot(pls.df, aes(Mono, None)) +
geom_point() +
geom_point(data = pls.df, aes(y = None), colour = 'red', size = 3)
ggplot(pls.df, aes(Mono, None)) +
geom_tile() +
geom_tile(data = pls.df, aes(y = None), colour = 'red', size = 3)
pls.df$Z <- runif(1211, 0, 5)
View(pls.df)
ggplot(pls.df, aes(Mono, None, fill= Z)) +
geom_tile()
data <-expand.grid(X=pls.df$Mono, Y=pls.df$None)
data$Z <- runif(1211, 0, 5)
ggplot(pls.df, aes(Mono, None, fill= Z)) +
geom_tile()
ggplot(data, aes(Mono, None, fill= Z)) +
geom_tile()
View(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
Y<-paste0("var"m seq(1,1211))
X<-pls.df$Mono
Y<-paste0("var", seq(1,1211))
data <-expand.grid(X=x, Y=y)
x<-pls.df$Mono
y<-paste0("var", seq(1,1211))
data <-expand.grid(X=x, Y=y)
data$Z <- runif(1211, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x<-pls.df$Mono[1:20]
y<-paste0("var", seq(1,20))
data <-expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x<-log(pls.df$Mono[1:20])
y<-paste0("var", seq(1,20))
data <-expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x<-log(pls.df$Mono[1:20]/10)
y<-paste0("var", seq(1,20))
data <-expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x<-log(pls.df$Mono[1:20]/100)
y<-paste0("var", seq(1,20))
data <-expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x<-log(pls.df$Mono[1:20]/100000)
y<-paste0("var", seq(1,20))
data <-expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x<-log(pls.df$Mono[1:20])
y<-paste0("var", seq(1,20))
data <-expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 100)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x<-pls.df$Mono[1:20]
y<-paste0("var", seq(1,20))
data <-expand.grid(X=x, Y=y)
data$Z <- log(x)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
View(data)
data$Z <- scale(pls$Mono, center=TRUE, scale=TRUE)
x<-pls.df$Mono
y<-paste0("var", seq(1,20))
x<-pls.df$Mono
y<-pls.df$None
data <-expand.grid(X=x, Y=y)
data$Z <- scale(pls.df$Mono, center=TRUE, scale=TRUE)
View(pls.df)
x<-pls.df$Ratio
y<- paste0("var", seq(1,1211))
data <-expand.grid(X=x, Y=y)
data$Z <- scale(pls.df$Ratio, center=TRUE, scale=TRUE)
z <- scale(pls.df$Ratio, center=TRUE, scale=TRUE)
data <-expand.grid(X=x, Y=y, Z=z)
data <-expand.grid(X=x, Y=y)
View(data)
SIMLR(X = pls.df$Ratio, c = 5, cores.ratio = 0)
library(SIMLR)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SIMLR")
library(SIMLR)
SIMLR(X = pls.df$Ratio, c = 5, cores.ratio = 0)
library(SIMLR)
pls.df <- read.table("191111_MonoVsNoneV1allC1files_DEonly_cluster.csv", header=TRUE, quote='\"', sep=',', comment.char='')
SIMLR(X = pls.df$Ratio, c = 5, cores.ratio = 0)
mn.df <- read.table("191111_MonoVsNoneV1allC1files_DEonly_cluster.csv", header=TRUE, quote='\"', sep=',', comment.char='')
data.matrix(mn.df)
mn.matrix <- data.matrix(mn.df)
SIMLR(X = mn.matrix, c = 5, cores.ratio = 0)
library(SIMLR)
mn.df <- read.table("191111_MonoVsNoneV1allC1files_DEonly_cluster.csv", header=TRUE, quote='\"', sep=',', comment.char='')
mn.matrix <- data.matrix(mn.df)
SIMLR(X = mn.matrix, c = 5, cores.ratio = 0)
View(mn.df)
View(mn.matrix)
mn.df <- read.table("191111_MonoVsNoneV1allC1files_DEonly_cluster.csv", header=TRUE, quote='\"', sep=',', comment.char='')
mn.matrix <- data.matrix(mn.df)
SIMLR(X = mn.matrix, c = 5, cores.ratio = 0)
mn.matrix <- data.matrix(mn.df['Abundance'])
View(mn.matrix)
groups <- mn.df['Group']
adonis(mn.matrix~groups)
library(vegan)
install.packages("vegan")
library(vegan)
adonis(mn.matrix~groups)
mono1 <- plsr(mn.matrix ~ groups, ncomp=1, data = monoTrain, validation = "LOO")
library(pls)
mono1 <- plsr(mn.matrix ~ groups, ncomp=1, data = monoTrain, validation = "LOO")
mono1 <- plsr(mn.matrix ~ groups, ncomp=1, data = mn.df, validation = "LOO")
groups <- data.matrix(mn.df['Group'])
mono1 <- plsr(mn.matrix ~ groups, ncomp=1, data = mn.df, validation = "LOO")
View(mono1)
summary(mono1)
mono1 <- plsr(mn.matrix ~ groups, ncomp=2, data = mn.df, validation = "LOO")
mn <- crossval(mono1, segments=10)
plot(mn)
mn <- crossval(mono1, segments=5)
plot(mn)
mn <- crossval(mono1, segments=2)
plot(mn)
SIMLR_Large_Scale(X=mn.matrix, c=groups, k=5, kk=5)
SIMLR_Large_Scale(X=mn.matrix, c=mn.df$Group, k=5, kk=5)
SIMLR_Large_Scale(X=mn.matrix, c=mn.df$Group, k=5)
SIMLR_Large_Scale(X=mn.matrix, c=mn.df$Group, kk=510
SIMLR_Large_Scale(X=mn.matrix, c=mn.df$Group, kk=10)
SIMLR_Large_Scale(X=mn.df$Abundance, c=mn.df$Group, kk=10)
arr <- array(dim=c(106, 106, 106))
arr[,,1] <- as.matrix(mn.df[[1]])
arr[,,2] <- as.matrix(mn.df[[2]])
arr
SIMLR_Large_Scale(X=arr, c=2, kk=10)
SIMLR_Large_Scale(X=arr[,,1], c=2, kk=10)
SIMLR_Large_Scale(X=arr$Abundance, c=mn.df$Group, kk=10)
SIMLR_Large_Scale(X=mn.df$Abundance, c=mn.df$Group, kk=10)
install.packages("reticulate")
library(reticulate)
shiny::runApp('~/Desktop/ProductionAndInformatics/FASinformatics')
